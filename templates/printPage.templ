package templates

import "github.com/Joao-Felisberto/devprivops-dashboard/data"
import "github.com/Joao-Felisberto/devprivops-dashboard/util"
import "fmt"

templ PrintPage(report *data.Report) {
    
    @Index(report)

    // @RegulationsPage(report, true)

    for _, r := range report.Regulations {
        @PoliciesPage(report.Project, report.Config, report.GetId(), r)
    }

    for _, us := range report.UserStories {
        @US(report.Project, report.Config, report.GetId(), us)
    }

    @AttackTreePage(report.AttackTrees...)
}

templ Index(report *data.Report) {
    <h1>Index</h1>

    <ol>
        <li> Regulations
            <ol>
            for _, r := range report.Regulations {
                <li><a href={makeURL(report.Project, report.Config, report.GetId(), r.Name, true, "view")}>{r.Name}</a></li>    
                <ol>
                for _, c := range r.ConsistencyResults {
                    <li><a href={makePolURL(report.Project, r.Name, c.Name, true, "view")}>{c.Name}</a></li>    
                }
                for _, p := range r.PolicyResults {
                    <li><a href={makePolURL(report.Project, r.Name, p.Name , true, "view")}>{p.Name}</a></li>    
                }
                </ol>
            }
            </ol>
        </li>

        <li> User Stories 
            <ol>
            for _, us := range report.UserStories {
                <li><a href={makeURL(report.Project, report.Config, report.GetId(), us.UseCase, true, "us")}>{us.UseCase}</a></li>    
                <ol>
                for _, r := range us.Requirements {
                    <li><a href={makePolURL(report.Project, us.UseCase, r.Title, true, "us")}>{r.Title}</a></li>    
                }
                </ol>
            }
            </ol>
        </li>

        <li> Attack and Harm Trees
            <ol>
            for _, tree := range report.AttackTrees {
                <li><a href={makeURL(report.Project, report.Config, report.GetId(), tree.Root.Description, true, "us")}>{tree.Root.Description}</a></li>    
            }
            </ol>
        </li>
    </ol>
}

func makePolURL(project string, regulation string, policy string, local bool, root string) templ.SafeURL {
    // TODO: cleanup, local is always true
    if local {
        id := util.ToHTMLID(policy)
        return templ.URL(fmt.Sprintf("#%s", id))
    } else { 
        return templ.URL(fmt.Sprintf("/%s/%s/%s#%s", project, regulation, root, util.ToHTMLID(policy)))
    }
}
