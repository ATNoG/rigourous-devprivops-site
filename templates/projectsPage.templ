package templates

import "github.com/Joao-Felisberto/devprivops-dashboard/data"
import "fmt"
import "strconv"
import "time"
import "sort"
import "slices"

templ ProjectsPage(reports ...*data.Report) {
    <h1>
        Projects
    </h1>

    <div class="grid-container">
        for _, report := range sortReports(reports) {
            @Project(report)
        }
    </div>
}

templ Project(report *data.Report) {
    <div class="card">
        <a href={templ.URL(fmt.Sprintf("/view/%s", report.Project))}>
            <h3>
                {report.Project}
            </h3>

            <p>
            {report.Config}
            </p>

            <p>
            {report.Branch}:{fmt.Sprint(report.Time)}
            </p>

            <div class="py-3">
                <a class="link-btn text-sm" href={templ.SafeURL(fmt.Sprintf("/print/%s", report.Project))}>Print</a>
                <a class="link-btn text-sm" href={templ.SafeURL(fmt.Sprintf("/us/%s", report.Project))}>User Stories</a>
            </div>
        </a>
    </div>
}

func sortReports(reports []*data.Report) []*data.Report {
    sort.Slice(reports, func(i, j int) bool {return reports[i].Time > reports[j].Time})

    unique := []*data.Report {}    
    visited := []string {}
    for _, e := range reports {
        if !slices.Contains(visited, e.Project) {
            unique = append(unique, e)
            visited = append(visited, e.Project)
        } 
    }

    return unique
}

func formatTime(timestampStr string) string {
    timestamp, err := strconv.ParseInt(timestampStr, 10, 64)
    if err != nil {
        // TODO: better error handling
        panic(err)
    }
    return time.Unix(timestamp, 0).Format("02/01/2006 03:04:05")
}