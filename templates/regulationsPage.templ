package templates

import "github.com/Joao-Felisberto/devprivops-dashboard/data"
import "github.com/Joao-Felisberto/devprivops-dashboard/util"
import "fmt"
import "strconv"

templ RegulationsPage(report *data.Report, localUrls bool) {
    <h1>
        Report for {report.Project}
    </h1>

    if !localUrls {
    <a class="link-btn" href={templ.SafeURL(fmt.Sprintf("/print/%s/%s/%s", report.Project, report.Config, report.GetId()))}>Printable Page</a>
    <a class="link-btn" href={templ.SafeURL(fmt.Sprintf("/us/%s/%s/%s", report.Project, report.Config, report.GetId()))}>User Stories</a>
    <a class="link-btn" href={templ.SafeURL(fmt.Sprintf("/tree/%s/%s/%s", report.Project, report.Config, report.GetId()))}>Attack and Harm Trees</a>
    }

    <div class="grid-container">
    for _, regulation := range report.Regulations {
        @Regulation(report.Project, report.Config, report.GetId(), regulation, localUrls)
    }
    </div>

    <!--TODO: UNSAFE!! Fix-->
    <div 
        hx-get={fmt.Sprintf("/data/%s/%s/%s/regulations?headingLevel=2", report.Project, report.Config, report.GetId())}
        hx-trigger="load"
        hx-swap="outerHTML"
    >
    // <div hx-get={templ.SafeURL(fmt.Sprintf("/data/%s/%s", project, id))}>
    </div>
}

templ Regulation (project string, config string, repId string, regulation *data.Regulation, localUrls bool) {
    <div class="card">
        <a href={makeURL(project, config, repId, regulation.Name, localUrls, "view")}>
            <h3>
                {regulation.Name}
            </h3>

            <div class="grid grid-cols-2 gap-4">
                <div>
                    Consistency: {strconv.Itoa(getAccomplishedPolicies(regulation.ConsistencyResults))}/{strconv.Itoa(len(regulation.ConsistencyResults))}
                </div>
                <div>
                    Policies: {strconv.Itoa(getAccomplishedPolicies(regulation.PolicyResults))}/{strconv.Itoa(len(regulation.PolicyResults))}
                </div>
            </div>
        </a>
    </div>
}

/*
func htmxEndpoint(project string, id string) SafeURL {
    return templ.SafeURL(fmt.Sprintf("/data/%s/%s", project, id))
}
*/

func makeURL(project string, config string, repId string, regulation string, local bool, root string) templ.SafeURL {
    if local {
        id := util.ToHTMLID(regulation)
        return templ.URL(fmt.Sprintf("#%s", id))
    } else { 
        return templ.URL(fmt.Sprintf("/%s/%s/%s/%s/%s", root, project, config, repId, regulation))
    }
}

func getAccomplishedPolicies(results []*data.RuleResult) int {
    return util.Sum(util.Map(results, 
        func(res *data.RuleResult) int {
            return util.Btoi(len(res.Results) == 0)
        }),
    )
}
