package templates

import "github.com/Joao-Felisberto/devprivops-dashboard/data"
import "fmt"
import "strconv"
import "slices"
import "github.com/Joao-Felisberto/devprivops-dashboard/util"

templ PoliciesPage(regulation *data.Regulation) {
    <h1 id={util.ToHTMLID(regulation.Name)} class="heading text-3xl">
        Compliance with {regulation.Name}
    </h1>

    <h2 class="heading text-2xl"> 
        Consistency report 
    </h2>

    for _, result := range regulation.ConsistencyResults {
        @Policy(result)
    }

    <h2 class="heading text-2xl"> 
        Policy compliance report 
    </h2>

    for _, result := range regulation.PolicyResults {
        @Policy(result)
    }
}

templ Policy(result *data.RuleResult) {
    <div class="card">
        <h3 id={util.ToHTMLID(result.Name)} class="text-xl text-emerald-500">
            {result.Name}
        </h3>
        
        <p class="py-5">
        {result.MappingMessage}
        </p>

        @ViolationTable(&result.Results)
    </div>
}

templ ViolationTable(violations *[]map[string]interface{}) {
    <table>
        <thead> 
        <tr>
        for _, k := range getVars(violations) {
            <th>{k}</th>
        }
        </tr>
        </thead>
        <tbody>
        for _, ln := range toTable(violations) {
            <tr>
            for _, e := range ln {
                <td>{e}</td>
            }
            </tr>
        }
        </tbody>
    </table>
}

func getVars(violations *[]map[string]interface{}) []string {
    if len(*violations) == 0 {
        return []string {}
    }
    first := (*violations)[0]

    keys := []string {}
    for k, _ := range first {
        keys = append(keys, display(k))
    }

    slices.Sort(keys)
    return keys
}

func toTable(violations *[]map[string]interface{}) [][]string {
    if len(*violations) == 0 {
        return [][]string {}
    }
    first := (*violations)[0]

    keys := []string {}
    res := [][]string {}
    for k, _ := range first {
        keys = append(keys, display(k))
    }
    slices.Sort(keys)

    for _, violation := range *violations {
        line := []string {}
        for _, k := range keys {
            line = append(line, display(violation[k]))
        }
        res = append(res, line)
    }

    return res
}

func display(v interface{}) string {
    switch t := v.(type) {
        case string:
            return t
        case int:
            return strconv.Itoa(t)
        case float64:
            return strconv.FormatFloat(t, 'f', -1, 64)
        default:
            return fmt.Sprintf("%v", v)
    }
}